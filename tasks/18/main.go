package main

import (
	"fmt"
	"sync"
)

/*
	Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
	По завершению программа должна выводить итоговое значение счетчика.
*/

// Определяем структуру счётчика
type counter struct {
	// Переменная для хранения значения счётчика
	num int
	// Используем mutex для синхронизации доступа к счётчику
	mu sync.Mutex
}

// Метод для инкрементации счётчика
func (c *counter) increment(wg *sync.WaitGroup) {
	// Выполняем отложенный вызов для уменьшаем счетчик WaitGroup на 1
	defer wg.Done()
	// Выполняем отложенный вызов для разблокировки mutex
	// Важно помнить что у нас формируется стек отложенных вызовов и первым выполнится c.mu.Unlock(), а за ним wg.Done()
	defer c.mu.Unlock()
	/*
		Блокируем Mutex для обеспечения безопасного доступа к счётчику в конкуренткой среде.
		Вес остальные горутины будут заблокированы при аналогичной попытки блокировки mutex и будут ожидать его разблокировки
	*/
	c.mu.Lock()
	// Выполняем инкрементацию значения
	c.num++
}

func main() {
	// Создаем экземпляр структуры
	counter := counter{}

	// Используем WaitGroup для ожидания завершения всех горутин
	var wg sync.WaitGroup

	// Запускаем 10 горутин для инкрементации счётчика
	for i := 0; i < 10; i++ {
		// Увеличиваем счетчик WaitGroup на 1
		wg.Add(1)
		// Запускаем горутину для инкрементации счётчика
		go counter.increment(&wg)
	}

	// Ожидаем завершения всех горутин
	wg.Wait()

	fmt.Println(counter.num)
}
