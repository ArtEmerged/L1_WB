package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"
)

/*
	Программа реализует постоянную запись данных в канал (основной поток) и набор из N воркеров,
	которые читают произвольные данные из канала и выводят их в стандартный вывод.
	Пользователю предоставляется возможность выбрать количество воркеров при старте программы.
*/

// worker является функцией-воркером, которая читает данные из канала и выводит их
func worker(wg *sync.WaitGroup, ch <-chan int, numW int) {
	// Выполняем отложенный вызов для уменьшения счетчика WaitGroup на 1
	defer wg.Done()
	log.Printf("worker[%d] запущен\n", numW)
	// Запускаем бесконечный цикл
	for {
		// Получаем данные из канала и выводим из в stdout
		// Если ok == false то канал закрыт, завершаем выполнение функции
		out, ok := <-ch
		if !ok {
			log.Printf("worker[%d] завершился\n", numW)
			return
		}
		fmt.Printf("worker[%d] выводит %d\n", numW, out)
	}
}

func main() {

	var N int
	fmt.Println("Укажите количество воркеров от 1 до 99")
	fmt.Scan(&N)

	// Проверяем валидность введенных данных о количестве воркеров
	if N < 1 || N > 99 {
		fmt.Printf("Вы указали %d воркеров. Количество воркеров должно быть в диапазоне 1-99\n", N)
		return
	}

	// Создаем канал для передачи данных от основного потока к воркерам
	ch := make(chan int)

	// WaitGroup для ожидания завершения всех горутин.
	// Можно обойтись без WaitGroup,
	// использую его, чтобы горутина успела завершить работу до завершения работы main()
	var wg sync.WaitGroup

	// Запускаем воркеры
	for i := 0; i < N; i++ {
		// Добавляем в WaitGroup 1 для каждого воркера
		wg.Add(1)
		go worker(&wg, ch, i+1)
	}

	// Создаем канал для получения сигналов завершения работы программы
	exit := make(chan os.Signal, 1)

	signal.Notify(exit, syscall.SIGTERM, syscall.SIGINT)

	log.Println("sender запущен")

	// 	Запускаем бесконечный цикл для непрерывно записывает данные в канал
	for {
		// select будет рандомно выбирать тот case, который не блокирует горутину при чтении из канала или записи.
		// Если таких case нет, то выполняется default.
		select {
		case <-exit:
			// После получения сигнала завершения работы основного потока (Ctrl + C),
			//то закрываем канал и ожидаем завершения работы воркеров
			close(ch)
			log.Println("sender завершился")
			wg.Wait()
			return
		default:
			// Слип был добавлен для удобства чтения вывода в stdout
			time.Sleep(time.Second)
			// Отправляем радомные значения в канал
			numSend := rand.Intn(100)
			ch <- numSend
			fmt.Printf("sender передал: %d\n", numSend)
		}
	}
}
